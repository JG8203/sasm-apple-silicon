name: "Build release"

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:

jobs:
  build-launcher:
      name: Build launcher
      strategy:
        matrix:
          go-version: [1.17.x]
          os: [ubuntu-18.04,windows-latest,macos-latest]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Install dependencies
          shell: bash
          run: |
           if [ "$RUNNER_OS" == "Linux" ]; then
             DEBIAN_FRONTEND=noninteractive  sudo apt-get update
             DEBIAN_FRONTEND=noninteractive  sudo apt-get install -y libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev
           fi
           go get fyne.io/fyne/v2/cmd/fyne
           go install fyne.io/fyne/v2/cmd/fyne

        - name: build
          shell: bash
          run: |
            cd launcher
            if [ "$RUNNER_OS" == "Windows" ]; then
              $(go env GOPATH)/bin/fyne package -os windows -icon Icon.png
              mkdir out
              mv launcher.exe out/launcher-Windows.exe
            elif [ "$RUNNER_OS" == "macOS" ]; then
              $(go env GOPATH)/bin/fyne package -os darwin -icon Icon.png
              mkdir out
              mv launcher.app out/SASM\ launcher.app
              chmod +x ./out/SASM\ launcher.app
              brew install create-dmg
              create-dmg \
                --volname "SASM Launcher" \
                --window-pos 200 120 \
                --window-size 800 400 \
                --icon-size 100 \
                --icon "SASM launcher.app" 200 190 \
                --hide-extension "SASM launcher.app" \
                --app-drop-link 600 185 \
                "SASM Launcher.dmg" \
                "out/"
              mv SASM\ Launcher.dmg out/launcher-MacOS.dmg
              rm -r ./out/SASM\ launcher.app
            else
              go build -x -o out/launcher-${RUNNER_OS}
              chmod +x ./out/launcher-${RUNNER_OS}
            fi

        - name: Copy artifacts
          run: |
            ls ./*

        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: launcher
            path: launcher/out/*

  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    needs: build-launcher
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: launcher
          
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: ./*
